#+FILETAGS: :program:haskell:horg:
* description
  A haskell program for parsing org-mode files. An org-mode file is read an
  a record is created from it. It contains the title, content, tags, 
  properties and all subheadings.

* library
** Heading
*** purpose
    provides the data structure, in which the information of a Heading of an 
    Org-mode file is saved. It is recursive due to subheadings.
*** DONE a traversal function is needed
    for considering different TODO states, filetags and categories. I'm going 
    to try to make in an instance of the traversable typeclass.
    Update:
    I can't make it an instance, because I need parameterized data type!
    Also, for tags, this is not useful, because tags are inherited into the 
    subtrees anyway.
** Filter
*** DONE title
    search for infixes
*** DONE content
    search for infixes
*** DONE tags
    search for exact matches
*** DONE state
    search for exact matches
*** kinds of filters
    there are three kinds of filters I can think of:
    - [X] deep (filters out everything, including the subtrees)
    - [X] surface (keep all subtrees of a non filtered out heading)
    - [ ] conserve (conserves the tree structure completely)
** Output
*** TODO generalize
    try to uniform the output creation mechanism, for plugin writers
*** JSON
   :json:
*** DOT
   :dot:
    the collect function may also be used for generating all the edges and 
    nodes, needed for graphviz input.
**** DONE get all used tags in a heading
     the collect function was used for that purpose.
**** DONE newline behavior
     of the dot program
**** DONE node style
     different node styles for different kinds of nodes
     - header: box
     - tag: ellipse
     - content: note
**** TODO sophisticated configuration
     all the configuration can also be done at the level of the headings. 
     Seems to be the superior approach at the moment. See filtering.
     - shall contents be shown?
       that could be realized as a traverse, removing contents.
***** DONE visual configuration
      shapes, arrows and colors. Everythin is packed inside records.
**** Nodes
     - [X] header
     - [X] content
     - [X] tag
     - [ ] (categories)
     - [ ] (certain properties)
**** Edges
     - [X] header to subheader
     - [X] tag to header
     - [X] header to content
     - [ ] (category to header)
     - [ ] (header to certain property)
*** Org-Mode
    Using the the functionality of =modifying=, custom reports may be created 
    and saved in other org-mode files. For example filtering with respect to 
    some =property=. An application could be, to have a giant org-mode file, 
    containing the logging of a program creation, with feature descriptions, 
    issue tracking, also finished issues. A README file or an TODO file can 
    then be provided.
**** DONE showContent
     must be modified in a way, such that line break occur only at spaces and 
     line length does not exceed 80 chars.
***** solution
      do not makes line breaks, as suggested above! I replaced 
      Data.Text.concat with Data.Text.unlines, so that line break of the 
      original documents are preserved.

* TODO sorting
** TODO certain dates
** TODO title?
** TODO tags
** TODO content length
** TODO properties
** TODO multi layer sorting
    sort for tags in first place. There will be many items per tags, which can 
    be sorted by another criterion.

* bugs
** DONE often there is a leading empty tag!
    problem solved by removing all empty lines.
** DONE there are problem with T.head when an empty line follows the title
    problem solved by removing all empty lines.
** DONE there is also a problem, when there is no line between to headings
    the Data.List.Split module behaves strange, could break again in future
** DONE head error when there is no file meta data

* parsing
   :parsing:
** TODO dates
    a date time library must be used here!
*** TODO SCHEDULED
*** TODO DEADLINE
*** TODO CLOSED
*** TODO LOGBOOK
     very very similar to properties.
*** TODO timestamps
** parse file headers
*** DONE FILETAGS
*** TODO category
** DONE PROPERTY parsing stucks
** DONE TODO states
    implementation: if the first word of the title line is written in capital 
    letters, it is used as state.
    problems:
    - it is not used, if it the title consists of only one word.
    - unresolved issue: e.g. * JSON output. JSON would be a state in that 
      case.

