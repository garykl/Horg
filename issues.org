* library

** Heading is the primary structure

    provides the data structure, in which the information of a Heading
    of an Org-mode file is saved. It is recursive due to
    subheadings. So, an orgmode file basically is a list of
    headings. Each haeding can have content which should be organized
    as a list of paragraphs.

*** TODO enhance content

convert the content from Text to [Text]



** Filter

*** TODO tag filter seems buggy

search for exact matches.


*** TODO range or half range of dates

    - [ ] all dates
    - [ ] deadlines
    - [ ] scheduled
    - [ ] timestamps


** Output

*** json                                                               :json:

*** dot                                                            :graphviz:

**** TODO visual configuration[1/2]

- [X] node configuration
- [ ] edge configuration


**** Nodes

     - [X] header
     - [X] content
     - [X] tag
     - [ ] (categories)
     - [ ] (certain properties)


**** Edges
     - [X] header to subheader
     - [X] tag to header
     - [X] header to content
     - [ ] (category to header)
     - [ ] (header to certain property)


*** Org-Mode

    Using the the functionality of =modifying=, custom reports may be created 
    and saved in other org-mode files. For example filtering with respect to 
    some =property=. An application could be, to have a giant org-mode file, 
    containing the logging of a program creation, with feature descriptions, 
    issue tracking, also finished issues. A README file or an TODO file can 
    then be provided.


** TODO sorting

*** TODO certain dates

*** TODO title?

*** TODO tags

*** TODO content length

*** TODO properties

*** TODO multi layer sorting

    you may wnat to sort for tags in first place. There will be many items per tags, which can be sorted by another criterion.


**** same criteria for all layers.

**** different criteria for different layers.
