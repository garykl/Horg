#+FILETAGS: :program:haskell:horg:
* description
  Horg is program, that reads an aribtrary number of org-mode files, and parses it contents into an internal data structure. Various filters can be applied to that structure, and two (there will be a third one) output formats can be produced: Org-mode and Dot (leter: JSON).

* basic usage
  Horg is a command line tool. You can either compile it with a haskell compiler like GHC, or run it with the =runhaskell= utility. In the latter case, the trivial usage is
  #+BEGIN_SRC sh
  runhaskell Horg.hs -- my.org
  #+END_SRC
  which will generate (hopefully) valid org-mode output to standard out, that should contain the exact same content as =my.org=. Save the output into a file via output redirection, that is provided by your favorite shell.
  #+BEGIN_SRC sh
  runhaskell Horg.hs -- my.org > tmp.org
  #+END_SRC
  The two minus signs are important, because everything before that delimiter is interpreted as an option.

* output formats
  =Horg= always prints to standard output. To control the output format, use the =-output= option.
  #+BEGIN_SRC sh
  runhaskell Horg.hs -output=org -- my.org > tmp.org
  runhaskell Horg.hs -output=dot -- my.org > tmp.dot
  #+END_SRC
  The first one of the two commands above, does the exact same thing, as the previous command, but explicitly stated, that =org-mode= output is created. The second command produces the file =tmp.dot=, that can further be processed by the =graphviz= suite for creating graphs, or mind maps. Those graphs contain three kinds of nodes: tags, headings, and contents. When exporting data to a =dot= file, it is often useful, to print the title only, and hide the details of an item. This can be done, by the =nocontent= option:
  #+BEGIN_SRC sh
  runhaskell Horg.hs -output=dot -nocontent -- my.org > tmp.dot
  #+END_SRC

* filtering
** basic filtering
  The data of several =org-mode= files can nicely be filtered by different criteria. So far four filters are supported, that can be combined in a sufficiently arbitrary manner. All the filter options must be enclosed in (single or double) quotes. The filters for the title and the content, consist of one single word, if it is contained in the title or content of a heading, it is returned (printed to standard output). There are also matching filters for the state and tags.
  #+BEGIN_SRC sh
  runhaskell Horg.hs "content=hedgehog title=animal state=TODO tag=hunting" -- my.org > tmp.org
  #+END_SRC
  This command leads to a file =tmp.org=, containing only headings, that, ... I think, it's quite readable. All filter options are combined by a logical =AND=. A logical =OR= can be inserted between arbitrary filter statements, with the rule, that =AND= binds tighter than =OR=.
  #+BEGIN_SRC sh
  runhaskell Horg.hs "state=TODO OR tag=neverending title=study" -- my.org > tmp.org
  #+END_SRC
  lists all =TODO= headings and those, tagged by =neverending= with =study= in the title.
** filter structure
   In an =org-mode= heading structure, a filter can have different meaning. What should be returned, when a filter returns a heading. The heading and all its subheadings could be returned, or only the heading without its subheadings, or all parent headings could be shown as well. In =Horg=, there are four filtering structures provided.
  #+BEGIN_SRC sh
  runhaskell Horg.hs "tag=filter" -filter=deep -- my.org > tmp.org    # this one is the default
  runhaskell Horg.hs "tag=filter" -filter=surface -- my.org > tmp.org
  runhaskell Horg.hs "tag=filter" -filter=conserve -- my.org > tmp.org
  runhaskell Horg.hs "tag=filter" -filter=preserve -- my.org > tmp.org
  #+END_SRC
*** conserve filter
    If an arbitrary subheading or the heading itself of a heading matches the filter, the whole heading with all its subheadings is returned.
*** preserve filter
    When a heading matches, no subheadings are shown (except if they match), but all its parent headings. This one is great for finding where this heading is from (after a complicated search)
*** surface filter
    When a heading matches, it is returned with all its subheadings
*** deep filter
    Only matching heading are returned without their children or parents, except their children or parent are matching, too. If subheadings, more than one level deeper than their matching ancestors, match, the returned heading tree is compressed, leaving out the non matching uncles and aunts.


* library
** Heading
*** purpose
    provides the data structure, in which the information of a Heading of an 
    Org-mode file is saved. It is recursive due to subheadings.
*** traversal function
** Filter
*** DONE title
    search for infixes
*** DONE content
    search for infixes
*** DONE tags
    search for exact matches
*** DONE state
    search for exact matches
*** kinds of filters
    there are three kinds of filters I can think of:
    - [X] deep (filters out everything, including the subtrees)
    - [X] surface (keep all subtrees of a non filtered out heading)
    - [X] conserve (conserves the tree structure completely)
**** DONE propagate tags
     the deep and surface filters should propagate their tags to its children 
     being filtered out.
*** range or half range of dates
    - [ ] all dates
    - [ ] deadlines
    - [ ] scheduled
    - [ ] timestamps
** Output
*** JSON										     :json:
*** DOT										 :graphviz:
    the collect function may also be used for generating all the edges and 
    nodes, needed for graphviz input.
**** DONE get all used tags in a heading
     the collect function was used for that purpose.
**** DONE newline behavior
     of the dot program
**** DONE node style
     different node styles for different kinds of nodes
     - header: box
     - tag: ellipse
     - content: note
**** DONE sophisticated configuration
***** DONE visual configuration
      shapes, arrows and colors. Everything is packed inside records.
**** Nodes
     - [X] header
     - [X] content
     - [X] tag
     - [ ] (categories)
     - [ ] (certain properties)
**** Edges
     - [X] header to subheader
     - [X] tag to header
     - [X] header to content
     - [ ] (category to header)
     - [ ] (header to certain property)
*** Org-Mode
    Using the the functionality of =modifying=, custom reports may be created 
    and saved in other org-mode files. For example filtering with respect to 
    some =property=. An application could be, to have a giant org-mode file, 
    containing the logging of a program creation, with feature descriptions, 
    issue tracking, also finished issues. A README file or an TODO file can 
    then be provided.
**** TODO showContent
     must be modified in a way, such that line break occur only at spaces and 
     line length does not exceed 80 chars.
     The following solution is a nice workaround, but for sophisticated 
     filtering, which means allowing spaces in the content search, for which 
     quotes are necessary, a proper way of line breaks is needed.

** TODO sorting
*** TODO certain dates
*** TODO title?
*** TODO tags
*** TODO content length
*** TODO properties
*** TODO multi layer sorting
    sort for tags in first place. There will be many items per tags, which can 
    be sorted by another criterion.

**** same criteria for all layers.
**** different criteria for different layers.
